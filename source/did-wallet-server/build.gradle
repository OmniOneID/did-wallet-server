plugins {
    id 'java'
    id 'org.springframework.boot' version '3.2.4'
    id 'io.spring.dependency-management' version '1.1.4'
    id 'com.github.jk1.dependency-license-report' version '2.0'
    id("com.github.node-gradle.node") version "5.0.0"
}

group = 'org.omnione.did'
version = '2.0.0'

java {
    sourceCompatibility = '17'
}
jar {
    enabled = false
}
configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

springBoot {
    buildInfo()
}

repositories {
    mavenCentral()
}

ext {
    set('springCloudVersion', "2023.0.1")
    set("skipFrontendBuild", System.getProperty("skipFrontendBuild"))
    set("frontendResourceDir", "${project.projectDir}/../did-wallet-admin/frontend")
    set("backendResourceDir", "${projectDir}/src/main/resources/static")
}

dependencies {

    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    annotationProcessor "org.springframework.boot:spring-boot-configuration-processor"

    // Swagger
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.2.0'

    implementation 'com.google.code.gson:gson:2.8.9'

    // API Feign
    implementation 'org.springframework.cloud:spring-cloud-starter-openfeign'

    implementation 'com.github.ulisesbocchio:jasypt-spring-boot-starter:3.0.5'

    compileOnly 'org.projectlombok:lombok:1.18.34'
    annotationProcessor 'org.projectlombok:lombok:1.18.34'

    testImplementation 'org.springframework.security:spring-security-test'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'

    // SDK
    implementation 'com.google.code.gson:gson:2.8.9'
    implementation 'org.bouncycastle:bcpkix-jdk18on:1.78.1'
    implementation 'org.bouncycastle:bcprov-jdk18on:1.78.1'
    implementation 'org.bouncycastle:bcutil-jdk18on:1.78.1'
    implementation 'org.hibernate.validator:hibernate-validator:8.0.1.Final'
    implementation 'org.apache.commons:commons-pool2:2.12.0'
    implementation('org.hyperledger.fabric:fabric-gateway-java:2.2.9')
    implementation fileTree(dir: 'libs', includes: ["*.jar"])

    // DB
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.liquibase:liquibase-core'
    runtimeOnly 'org.postgresql:postgresql'

    implementation 'org.springframework.boot:spring-boot-starter-actuator'

    // Query DSL
    implementation 'io.github.openfeign.querydsl:querydsl-jpa:6.11'
    annotationProcessor 'io.github.openfeign.querydsl:querydsl-apt:6.11:jpa'
    annotationProcessor "jakarta.annotation:jakarta.annotation-api"
    annotationProcessor "jakarta.persistence:jakarta.persistence-api"

    // Web3
    implementation("org.web3j:core:4.13.0")
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

tasks.named('test') {
    useJUnitPlatform()
}

import com.github.jk1.license.render.*
import com.github.jk1.license.filter.LicenseBundleNormalizer
import com.github.jk1.license.filter.ExcludeTransitiveDependenciesFilter

licenseReport {
    outputDir = "$projectDir/build/licenses"

    // markdown 생성
    renderers = [new InventoryMarkdownReportRenderer()]

    // 보고서에 첫 번째 수준 종속성만 표기
    filters = [new LicenseBundleNormalizer(), new ExcludeTransitiveDependenciesFilter()]
}

node {
    version = "22.9.0"
    download = true
    nodeProjectDir = file("${frontendResourceDir}")
    workDir = file("${projectDir}/.gradle/nodejs")
    npmWorkDir = file("${projectDir}/.gradle/npm")
}

import com.github.gradle.node.npm.task.NpmTask

tasks.register('deleteFrontResources', Delete) {
    delete "${backendResourceDir}/**"
    delete "${backendResourceDir}"
    delete "${frontendResourceDir}/dist/**"
    delete "${frontendResourceDir}/dist"
}

tasks.register('npm_install', NpmTask) {
    dependsOn tasks.named("nodeSetup")
    workingDir = file("${frontendResourceDir}")
    args = ['install']
}

tasks.register('npm_build', NpmTask) {
    dependsOn 'deleteFrontResources'
    dependsOn 'npm_install'
    workingDir = file("${frontendResourceDir}")
    args = ['run', 'build']
}

tasks.register('copyFrontResources', Copy) {
    dependsOn 'npm_build'
    from "${frontendResourceDir}/dist"
    into "${backendResourceDir}"
}

tasks.named('copyFrontResources') {
    mustRunAfter('npm_build')
}

tasks.named('processResources') {
    println "## skipFrontendBuild : ${skipFrontendBuild}"
    if (!Boolean.valueOf(skipFrontendBuild)) {
        dependsOn('npm_build', 'copyFrontResources')
    }

}